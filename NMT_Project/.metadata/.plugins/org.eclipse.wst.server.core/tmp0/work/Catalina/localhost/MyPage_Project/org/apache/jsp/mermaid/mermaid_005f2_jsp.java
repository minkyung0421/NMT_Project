/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.5
 * Generated at: 2018-09-06 04:49:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.mermaid;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class mermaid_005f2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>The Little Mermaid</title>\r\n");
      out.write(" <link rel=\"stylesheet\" type=\"text/css\" href=\"mermaid.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <section class=\"section_menu\">\r\n");
      out.write("            <a href = \"../list.jsp\"> <button>자유게시판</button></a>\r\n");
      out.write("        <article class=\"menu\">\r\n");
      out.write("            <a href = \"../index.jsp\"><p class=\"index\">Index</p></a>\r\n");
      out.write("            <ul class=\"mylist\">\r\n");
      out.write("                <li class = \"snow_link\"><a href = \"../snow/snow_1.jsp\" style=\"color:black\">\r\n");
      out.write("                        <label>Snow White</label>\r\n");
      out.write("                    </a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class = \"mermaid_link\">\r\n");
      out.write("                    <a href=\"../mermaid/mermaid_1.jsp\" style=\"color:black\">\r\n");
      out.write("                        <label>The Little Mermaid</label>\r\n");
      out.write("                    </a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class = \"christmas_link\"><a href = \"../christmas/christmas_1.jsp\" style = \"color:black\"><label>The Nightmare before Christmas</label></a></li>\r\n");
      out.write("                <li class=\"rata_link\">\r\n");
      out.write("                    <a href=\"../rata/rata_1.jsp\" style=\"color:black\">\r\n");
      out.write("                        <label>Ratatouille</label>\r\n");
      out.write("                    </a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class = \"inside_link\">\r\n");
      out.write("                    <a href=\"../inside/inside_1.jsp\" style=\"color:black\">\r\n");
      out.write("                        <label>Inside Out</label>\r\n");
      out.write("                    </a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class = \"moana_link\">\r\n");
      out.write("                    <a href=\"../moana/moana_1.jsp\" style=\"color:black\">\r\n");
      out.write("                        <label>Moana</label>\r\n");
      out.write("                    </a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class = \"koko_link\"><a href = \"../koko/koko_1.jsp\" style = \"color:black\"><label>Coco</label></a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </article>\r\n");
      out.write("    </section>\r\n");
      out.write("\r\n");
      out.write("    <section class = \"section_content\">\r\n");
      out.write("        <article>\r\n");
      out.write("            <img src = \"../mermaid_img/ariel.png\" width=\"15%\" height=\"25%\" align=\"left\" style = \"margin-right: 2%; margin-bottom: 3%\">\r\n");
      out.write("            <label style = \"font-size:20pt;\">에리얼(ARIEL)</label><br><br>\r\n");
      out.write("            빨간 머리카락에 파랗고 큰 눈을 가진 트라이튼의 막내딸이자 아틀란티카의 공주. \r\n");
      out.write("            아버지 트라이튼의 말을 가장 안 듣는 딸이지만 동시에 가장 사랑받는 딸이기도 하다. \r\n");
      out.write("           항상 지상세계를 동경해서 큰 동굴 가득 인간 물건을 수집할 만큼 호기심이 많고 행동력도 뛰어나다.\r\n");
      out.write("           무모할 정도로 대담한 면이 있다. 예법에 얽매이는 것을 싫어하는 듯, 매우 자유분방하고 명랑하다. \r\n");
      out.write("           엄격하고 바다 밖으로 나가는 것을 반대하는 아버지에게 반항하는 등 꼭 십대스러운 사춘기 주인공 캐릭터.\r\n");
      out.write("\r\n");
      out.write("        </article>\r\n");
      out.write("        <article style = \"float: left\">\r\n");
      out.write("            <a href = \"mermaid_3.jsp\"><article style=\"float: right; margin-top:10%\"><label style=\"font-weight: 800\">STORY</label><img src = \"../snow_img/nn.png\"></article></a>\r\n");
      out.write("            <img src = \"../mermaid_img/sebas.jpg\" width=\"20%\" height=\"10%\" align=\"right\"  style = \"margin-left: 2%; margin-bottom: 3%\">\r\n");
      out.write("            <label style = \"float: right; font-size:20pt;\">세바스찬(SEBASTIAN)</label><br><br>\r\n");
      out.write("            붉은 게, 트라이튼에게 굉장한 신뢰를 받고 있는 신하로, 왕의 비서이자 실력있는 왕실 작곡가. 에리얼이 워낙 지상에 가고 싶어하여 트리톤이 하다못해 에리얼을 감시하라는 명령을 했다. \r\n");
      out.write("            어지간히 츤데레. 에리얼에게 계속 잔소리를 하긴해도 아끼는지 에리얼이 우르슐라와 금지된 거래를 하고 나서도 아리엘이 자는 모습을 보면서 살짝 웃어준다. \r\n");
      out.write("            \r\n");
      out.write("           \r\n");
      out.write("        </article>\r\n");
      out.write("        <article>\r\n");
      out.write("            <img src = \"../mermaid_img/Urs.jpg\" width=\"25%\" height=\"35%\" align=\"left\" style = \"margin-right: 2%;\">\r\n");
      out.write("            <br><br><br><br><br>\r\n");
      out.write("            <label style = \"font-size:20pt;\">우르슬라(URSULA)</label><br><br>\r\n");
      out.write("            아틀란티카의 변방에서 사람들의 소원을 들어주는 바다의 마녀로, 뚱뚱한 체격에 짙은 화장, 문어의 하반신을 가진 인상적인 모습을 하고 있다. \r\n");
      out.write("            플랫섬과 잿섬이란 쌍둥이 곰치들을 사역마로 부리며, 인어들의 왕이자 바다의 지배자인 트라이튼을 증오하며 그를 몰락시키기 위해 음모를 꾸미는 무서운 인물.\r\n");
      out.write("        </article>\r\n");
      out.write("    </section>\r\n");
      out.write("    \r\n");
      out.write("    <section>\r\n");
      out.write("           \r\n");
      out.write("    </section>\r\n");
      out.write("    <footer>Copyright&copy;2018 3517 최민경 All rights reserved. </footer>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
