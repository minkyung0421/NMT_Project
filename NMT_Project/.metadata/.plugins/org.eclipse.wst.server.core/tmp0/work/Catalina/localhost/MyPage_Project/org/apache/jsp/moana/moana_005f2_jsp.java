/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.5
 * Generated at: 2018-08-30 23:29:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.moana;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class moana_005f2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Moana</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"moana.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<section class=\"section_menu\">\r\n");
      out.write("            <a href = \"../list.jsp\"> <button>자유게시판</button></a>\r\n");
      out.write("        <article class=\"menu\">\r\n");
      out.write("            <a href = \"../index.jsp\"><p class=\"index\">Index</p></a>\r\n");
      out.write("            <ul class=\"mylist\">\r\n");
      out.write("                <li class = \"snow_link\"><a href = \"../snow/snow_1.jsp\" style=\"color:black\">\r\n");
      out.write("                        <label>Snow White</label>\r\n");
      out.write("                    </a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class = \"mermaid_link\">\r\n");
      out.write("                    <a href=\"../mermaid/mermaid_1.jsp\" style=\"color:black\">\r\n");
      out.write("                        <label>The Little Mermaid</label>\r\n");
      out.write("                    </a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class = \"christmas_link\"><a href = \"../christmas/christmas_1.jsp\" style = \"color:black\"><label>The Nightmare before Christmas</label></a></li>\r\n");
      out.write("                <li class=\"rata_link\">\r\n");
      out.write("                    <a href=\"../rata/rata_1.jsp\" style=\"color:black\">\r\n");
      out.write("                        <label>Ratatouille</label>\r\n");
      out.write("                    </a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class = \"inside_link\">\r\n");
      out.write("                    <a href=\"../inside/inside_1.jsp\" style=\"color:black\">\r\n");
      out.write("                        <label>Inside Out</label>\r\n");
      out.write("                    </a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class = \"moana_link\">\r\n");
      out.write("                    <a href=\"../moana/moana_1.jsp\" style=\"color:black\">\r\n");
      out.write("                        <label>Moana</label>\r\n");
      out.write("                    </a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class = \"koko_link\"><a href = \"../koko/koko_1.jsp\" style = \"color:black\"><label>Coco</label></a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </article>\r\n");
      out.write("    </section>\r\n");
      out.write("\r\n");
      out.write("    <section class = \"section_content\">\r\n");
      out.write("        <article>\r\n");
      out.write("            <img src = \"../moana_img/moa.png\" width=\"15%\" height=\"25%\" align=\"left\" style = \"margin-right: 2%; margin-bottom: 3%\">\r\n");
      out.write("            <label style = \"font-size:20pt;\">모아나(MOANA)</label><br><br>\r\n");
      out.write("            다혈질이고 한다면 하는 성격이 특징. 또한 어린 나이에도 불구하고 대범하고 당찬 면, 그리고 상당한 책임의식을 지니고 있다.\r\n");
      out.write("            이런 류의 캐릭터가 대개 자신의 꿈을 반대하는 부모에게 완강히 반항한다던지 해서 부모와 사이가 좋지만은 않은 것에 비해 모아나는 어느 정도 자라나 추장으로서의 사명을 받아들이려 하고\r\n");
      out.write("             아버지 투이도 그런 딸을 자랑스러워 하며 웬만해서는 부드럽게 타이르려고 한다. \r\n");
      out.write("            그러던 어느 날 섬에 기근의 징조가 보이기 시작했고, \r\n");
      out.write("            할머니 탈라의 말에 따라 숨겨진 동굴에서 북을 치고 조상들의 환영을 본 뒤 스스로의 사명을 자각하고 테 피티의 심장을 지니고 마우이를 찾아 모험을 떠난다.\r\n");
      out.write("\r\n");
      out.write("        </article>\r\n");
      out.write("        <article style = \"float: left\">\r\n");
      out.write("            <a href = \"moana_3.jsp\"><article style=\"float: right; margin-top:10%\"> <label style=\"font-weight: 800\">STORY</label><img src = \"../snow_img/nn.png\"></article></a>\r\n");
      out.write("            <img src = \"../moana_img/maui.png\" width=\"20%\" height=\"10%\" align=\"right\"  style = \"margin-left: 2%; margin-bottom: 3%\">\r\n");
      out.write("            <label style = \"float: right; font-size:20pt;\">마우이(MAUI)</label><br><br>\r\n");
      out.write("            모아나의 두 주역 중 한 명으로, 모아나와 함께 테피티를 찾으러 가는 모험을 하게 되는 반인반신 영웅이다.이 사람과 관계 없다 작중에서는 바람과 바다의 반신이라고 칭해진다.\r\n");
      out.write("            곱슬진 검은 장발머리와 근육질 거구, 온 몸 위에 그려진 문신이 인상적인 남성, 엄지 두 개 만으로 하늘을 들어올리고, 지하세계에서 불을 훔쳐다 인간들에게 제공하고, \r\n");
      out.write("            엄청나게 빨리 움직였던 태양의 속도를 늦추고, 너무 높은 곳에 있던 바람을 끌어당겨주고, 섬들을 바다 위로 낚아올리고, \r\n");
      out.write("            장어 내장을 땅에 묻어 코코넛을 자라나게 하는 등 무수히 많은 업적을 이루어낸 전설적인 영웅이다.\r\n");
      out.write("            \r\n");
      out.write("           \r\n");
      out.write("        </article>\r\n");
      out.write("        <article>\r\n");
      out.write("            <img src = \"../moana_img/tefiti.png\" width=\"25%\" height=\"35%\" align=\"left\" style = \"margin-right: 2%;\">\r\n");
      out.write("            <img src = \"../moana_img/teka.jpg\" width=\"15%\" height=\"25%\" align=\"left\" style = \"margin-right: 2%;\">\r\n");
      out.write("            <br><br><br><br><br>\r\n");
      out.write("            <label style = \"font-size:20pt;\">테 피티/테 카(TE FITI/TE KA)</label><br><br>\r\n");
      out.write("            불과 땅의 악마이며, 전신이 돌과 용암으로 이루어진 거인 형상의 화산섬 괴물이다. \r\n");
      out.write("            테 피티의 심장을 노리는 괴물들 중에서도 가장 강력하고 거대한 존재이다.테 피티의 심장을 마우이가 훔쳐 도망갈 때 처음으로 나타났다.\r\n");
      out.write("            테 카의 정체는 분노로 인해 흉측하게 변한 창조신 테 피티였다.\r\n");
      out.write("        </article>\r\n");
      out.write("    </section>\r\n");
      out.write("    \r\n");
      out.write("    <section>\r\n");
      out.write("           \r\n");
      out.write("    </section>\r\n");
      out.write("    <footer>Copyright&copy;2018 3517 최민경 All rights reserved. </footer>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
