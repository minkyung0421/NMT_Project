/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.5
 * Generated at: 2018-09-05 01:19:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.christmas;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class christmas_005f2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>The Nightmare before Christmas</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"christmas.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write(" <section class=\"section_menu\">\r\n");
      out.write("        <article class=\"menu\">\r\n");
      out.write("                <a href = \"../list.jsp\"><button>자유게시판</button></a>\r\n");
      out.write("            <a href = \"../index.jsp\"><p class=\"index\">Index</p></a>\r\n");
      out.write("            <ul class=\"mylist\">\r\n");
      out.write("                <li class = \"snow_link\"><a href = \"../snow/snow_1.jsp\" style=\"color:black\">\r\n");
      out.write("                        <label>Snow White</label>\r\n");
      out.write("                    </a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class = \"mermaid_link\">\r\n");
      out.write("                    <a href=\"../mermaid/mermaid_1.jsp\" style=\"color:black\">\r\n");
      out.write("                        <label>The Little Mermaid</label>\r\n");
      out.write("                    </a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class = \"christmas_link\"><a href = \"../christmas/christmas_1.jsp\" style = \"color:black\"><label>The Nightmare before Christmas</label></a></li>\r\n");
      out.write("                <li class=\"rata_link\">\r\n");
      out.write("                    <a href=\"../rata/rata_1.jsp\" style=\"color:black\">\r\n");
      out.write("                        <label>Ratatouille</label>\r\n");
      out.write("                    </a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class = \"inside_link\">\r\n");
      out.write("                    <a href=\"../inside/inside_1.jsp\" style=\"color:black\">\r\n");
      out.write("                        <label>Inside Out</label>\r\n");
      out.write("                    </a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class = \"moana_link\">\r\n");
      out.write("                    <a href=\"../moana/moana_1.jsp\" style=\"color:black\">\r\n");
      out.write("                        <label>Moana</label>\r\n");
      out.write("                    </a>\r\n");
      out.write("                </li>\r\n");
      out.write("                <li class = \"koko_link\"><a href = \"../koko/koko_1.jsp\" style = \"color:black\"><label>Coco</label></a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </article>\r\n");
      out.write("    </section>\r\n");
      out.write("\r\n");
      out.write("    <section class = \"section_content\">\r\n");
      out.write("        <article>\r\n");
      out.write("            <img src = \"../christmas_img/jack.png\" width=\"10%\" height=\"13%\" align=\"left\" style = \"margin-right: 2%;\">\r\n");
      out.write("            <label style = \"font-size:20pt;\">잭 스켈링턴(JACK SKELINGTON)</label><br><br>\r\n");
      out.write("            호박의 왕(The Pumpkin King)이라고도 불리는 할로윈 마을 최고의 인기 스타. 신사적이고 품위있는 해골\r\n");
      out.write("            일단 한번 하자고 마음 먹으면 주위 사람들이 뜯어말려도 무시하고 그대로 독단적으로 일을 벌이는 성격, \r\n");
      out.write("            자신이 목격한 크리스마스 마을의 분위기에 반해 이번에는 할로윈 대신 크리스마스를 즐겨보자고 마을 주민들을 진두 지휘하며 크리스마스 준비를 하게 만든다던가, \r\n");
      out.write("            계시를 받은 샐리가 당장이라도 그만둬야 한다고 말려도 쿨하게 무시하고 산타 의상의 제작 임무를 떠넘긴다던가, \r\n");
      out.write("            록과 쇼크, 배럴을 시켜서 산타를 납치하게 하는 등 온갖 짓을 저지르고는 마침내 크리스마스를 충격과 공포의 날로 뒤바꾸는 대형사고를 치고 만다. \r\n");
      out.write("        </article>\r\n");
      out.write("        <article style = \"float: left\">\r\n");
      out.write("            <a href = \"christmas_3.jsp\"><article style=\"float: right; margin-top:10%\"> <label style=\"font-weight: 800\">STORY</label><img src = \"../snow_img/nn.png\"></article></a>\r\n");
      out.write("            <img src = \"../christmas_img/sally.png\" width=\"13%\" height=\"15%\" align=\"right\"  style = \"margin-left: 2%;\">\r\n");
      out.write("            <label style = \"float: right; font-size:20pt;\">샐리(SALLY)</label><br><br>\r\n");
      out.write("            핑켈슈타인 박사가 만든 헝겊 인형. 시체나 기계를 엮어 만든 것이 아닌, 속에 가랑잎을 채운 봉제인형이다.\r\n");
      out.write("            마음 속 깊이 잭을 흠모하고 있으나 잭이 너무 유명인사인 관계로 감히 다가서지 못한다. \r\n");
      out.write("            언제나 먼발치에서 잭을 지켜보며 짝사랑으로 속앓이를 하지만 잭은 전혀 눈치채지 못한다.\r\n");
      out.write("            크리스마스 전 불행한 전조를 느끼고 이후 마을 주민들중 유일하게 잭을 말리며 크리스마스 준비를 포기하도록 종용하지만 실패로 돌아간다. \r\n");
      out.write("\r\n");
      out.write("            \r\n");
      out.write("           \r\n");
      out.write("        </article>\r\n");
      out.write("        <article>\r\n");
      out.write("            <img src = \"../christmas_img/oogie.png\" width=\"13%\" height=\"15%\" align=\"left\" style = \"margin-right: 2%;\">\r\n");
      out.write("            <br><br><br><br><br>\r\n");
      out.write("            <label style = \"font-size:20pt;\">우기부기(OOGIE BOOGIE)</label><br><br>\r\n");
      out.write("            지저분한 푸댓자루로 만들어진 뚱땡이 악당. \r\n");
      out.write("            자타공인 할로윈 마을에서 가장 사악한 인물이다. 보다 정확히 말하자면, 이 녀석만이 유일하게 악의를 가지고 행동한다.\r\n");
      out.write("            록과 쇼크, 배럴의 세 악동을 부하로 두고 나쁜 짓을 일삼는다. 시장조차도 무서워하는 것으로 보아 할로윈 마을에서조차 악명이 높은 듯. \r\n");
      out.write("            늘 도박하는 것을 좋아하며 세 악동이 납치해온 산타를 납치 감금 및 고문하는 최종 보스. 벌레를 흡입해서 먹고 사는데, 나중에 밝혀지지만 사실 그 정체는 온갖 벌레들의 군집체이다.\r\n");
      out.write("        </article>\r\n");
      out.write("    </section>\r\n");
      out.write("    \r\n");
      out.write("    <section>\r\n");
      out.write("           \r\n");
      out.write("    </section>\r\n");
      out.write("    <footer>Copyright&copy;2018 3517 최민경 All rights reserved. </footer>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
